import "../patterns/DwyerPatterns.spectra"
/*
 * Auto-generated Spectra file
 */
module Cross4
env Int(0..10) carMain;
env Int(0..10) carSide;
env boolean carMainCrossing;
env boolean carSideCrossing;
sys boolean goMain;
sys boolean goSide;

//asm onRedLightCarsAccumulate:
//  G (!goMain -> next(carMain) >= carMain) &
//  (!goSide -> next(carSide) >= carSide);
//
//asm onGreenCarsCanDriveThtough:
//  G ((goMain)  -> next(carMain) <= carMain) &
//  ((goSide)  -> next(carSide) <= carSide);

asm carMain=0 & carSide=0 & ! carMainCrossing & !carSideCrossing;
gar goMain;
asm carWillCrossOnlyOnGreenLight:
  G (next(carMainCrossing) & (!carMainCrossing)->goMain) &
  (next(carSideCrossing) & (!carSideCrossing)->goSide);

asm pRespondsToS(!goMain ,!carMainCrossing);
asm pRespondsToS(!goSide, !carSideCrossing);



gar GF carMain>0 -> goMain;
gar GF carSide>0 -> goSide;
gar G !(carMainCrossing & carSideCrossing);
gar G(!carMainCrossing & !carSideCrossing-> next(goMain | goSide));
weight 1
  carMain >= carSide & next(goMain) | carSide>carMain & next(goSide);

weight -1
  carMain >= carSide & next(goSide) | carSide>carMain & next(goMain);