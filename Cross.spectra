import "../patterns/DwyerPatterns.spectra"
/*
 * Auto-generated Spectra file
 */
module Cross
env Int(0..20) carMain;
env Int(0..20) carSide;
env boolean carMainCrossing;
env boolean carSideCrossing;
sys boolean goMain;
sys boolean goSide;



define
  drainingIntersection := !goMain & !goSide;


asm atTheBeginningEmptyRoad:
  carMain = 0 & carSide = 0 & !carMainCrossing & ! carSideCrossing;

asm carWillCrossOnlyOnGreenLight:
  G (next(carMainCrossing) & (!carMainCrossing)->goMain) &
  (next(carSideCrossing) & (!carSideCrossing)->goSide);


asm onRedLightCarsAccumulate:
  G (!goMain -> next(carMain) >= carMain) &
  (!goSide -> next(carSide) >= carSide);

//asm onGreenCarsCanDriveThtough:
asm pRespondsToS(goMain, next(carMain) < carMain);
asm pRespondsToS(goSide, next(carSide) < carSide);

asm pRespondsToS( goMain ,!carMainCrossing);
asm pRespondsToS(goSide, !carSideCrossing);


gar G next(!goMain) & goMain -> carSide>carMain;
gar G next(!goSide) & goSide -> carMain>carSide;


gar pRespondsToS(carSide>carMain,goSide);
gar pRespondsToS(carMain>carSide,goMain);

gar G !(carMainCrossing & carSideCrossing);
gar G(drainingIntersection)->(carMainCrossing | carSideCrossing);

